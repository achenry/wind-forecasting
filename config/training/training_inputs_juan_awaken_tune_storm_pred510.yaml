experiment:
  username: jmb0507
  project_name: train_awaken_storm_2
  run_name: train_awaken_tactis_turb_pred510_ptt
  project_root: /user/taed7566/Forecasting/wind-forecasting
  log_dir: /dss/work/taed7566/Forecasting_Outputs/wind-forecasting/logs/
  notes: "Training AWAKEN with Tactis with per_turbine_target = true"
  extra_tags: ["train", "tactis", "turb", "LUT", "pred510", "ptt"] # By default already has GPU id and model name. LUT: 512, greedy: 210

logging:
  entity: jmb0507-cu-boulder # Wandb entity (group name)
  wandb_mode: online
  save_code: false # Do not save code to W&B
  wandb_dir: /dss/work/taed7566/Forecasting_Outputs/wind-forecasting/logs # Let WandB create the 'wandb' subdir here
  optuna_dir: /dss/work/taed7566/Forecasting_Outputs/wind-forecasting/optuna
  checkpoint_dir: /dss/work/taed7566/Forecasting_Outputs/wind-forecasting/checkpoints
  chkp_dir_suffix: "_510"
  slurm_output_dir: /dss/work/taed7566/Forecasting_Outputs/wind-forecasting/logs/slurm_logs

optuna:
  save_trial_code: false      # Default false
  n_trials_per_worker: 50   # Replaced by total_study_trials for global trial limit
  total_study_trials: 200     # Global maximum number of trials across all workers, takes precedence over n_trials_per_worker
  max_epochs: 40              # epochs per trial
  sampler: "random"           # Options: "random" (ExpectedNumInstanceSampler), "sequential" (SequentialSampler)
  sampler_params:
    tpe:
      n_startup_trials: 8
      multivariate: true
      constant_liar: true
      group: false
  base_limit_train_batches: 5000    # base batches per epoch - will be scaled based on batch_size ratio
  metric: "val_loss"          # The metric to optimize (NLL)
  direction: "minimize"       # Whether to minimize or maximize the metric

  resample_freq_choices: [15, 30, 45, 60] # Resample frequency in seconds
  
  # Pruning configuration
  pruning:
    enabled: true
    type: "successivehalving"
    min_resource: 12
    reduction_factor: 2
    min_early_stopping_rate: 0
    bootstrap_count: 8
    # type: "patient"
    # patience: 1               # Configure PatientPruner: number of steps to wait (epochs) before pruning
    # min_delta: 2.0            # Configure PatientPruner: tolerance for improvement (default 0.0)
    # wrapped_pruner:
    #   type: "percentile"      # Set the wrapped pruner type
    #   percentile: 50.0        # Configure PercentilePruner: prune trials below this percentile
    #   n_startup_trials: 4     # Configure PercentilePruner: wait for this many trials before pruning
    #   n_warmup_steps: 4      # Configure PercentilePruner: wait for this many steps (epochs) before pruning
    # # type: "hyperband"
    #   type: "successivehalving"
    #   min_resource: 8             # Applies to SuccessiveHalving and Hyperband
    #   max_resource: 100           # Applies to Hyperband only
    #   reduction_factor: 2         # Applies to SuccessiveHalving and Hyperband
    #   bootstrap_count: 0          # Number of trials to complete before pruning

  # Optuna visualization configuration (additional to wandb)
  visualization:
    enabled: true
    output_dir: ${logging.optuna_dir}/visualizations
    plots:
      optimization_history: true
      parameter_importance: true
      slice_plot: true

  # Storage backend configuration
  storage:
    backend: "postgresql"  # Options: "postgresql", "sqlite"
    # --- TCP/IP PostgreSQL Settings ---
    use_tcp: true
    use_socket: false
    db_host: "pg-windforecasting-aiven-wind-forecasting.e.aivencloud.com"
    db_port: 12472
    db_name: "optuna"
    db_user: "avnadmin"
    db_password_env_var: "AIVEN_PG_PASSWORD"
    sslmode: "require"
    sslrootcert_path: "config/certs/aiven_pg_ca.pem"

    # --- SQLite Specific Settings ---
    # Absolute path is recommended for SQLite when used across different contexts
    # sqlite_path: "/user/taed7566/Forecasting/wind-forecasting/optuna/SQL/flasc_tactis_2.db"
    # sqlite_wal: true  # Enable WAL mode for SQLite
    # sqlite_timeout: 600  # Timeout in seconds for SQLite locks

    # --- PostgreSQL Specific Settings (Commented out as backend is sqlite) ---
    # pgdata_path: "/user/taed7566/Forecasting/wind-forecasting/optuna/pgdata" # Directory for PostgreSQL data files
    # pgdata_instance_name: "flasc_tactis" # INFO: CREATE NEW INSTANCE (DIRECTORY) FOR STUDIES #flasc_tactis, flasc_default , keep same for resuming!!
    # db_name: "optuna_study_db"  # Name of the PostgreSQL database
    # db_user: "optuna_user"
    # use_socket: true      # Use Unix domain socket for local connection (recommended on single node)
    # socket_dir_base: "/user/taed7566/Forecasting/wind-forecasting/optuna/sockets" # Base directory for socket files
    # sync_dir: "/user/taed7566/Forecasting/wind-forecasting/optuna/sync"           # Directory for synchronization files
    # use_tcp: false
    # db_host: "localhost"
    # db_port: 5432
    # run_cmd_shell: false # Set to true if specific commands require shell=True

  # Optuna Dashboard auto-launch configuration
  dashboard:
    enabled: false             # Set to true to automatically launch the dashboard on rank 0
    port: 8088                # Port for the dashboard web server
    log_file: "${logging.optuna_dir}/optuna_dashboard.log" # Log file for the dashboard process

dataset:
    sampler: "random"    # Options: "random" (ExpectedNumInstanceSampler), "sequential" (SequentialSampler) INFO: This is used for training
    data_path: /dss/work/taed7566/Forecasting_Outputs/wind-forecasting/DATA/preprocessed_awaken_data/awaken_processed_normalized.parquet
    normalization_consts_path:  /dss/work/taed7566/Forecasting_Outputs/wind-forecasting/DATA/preprocessed_awaken_data/awaken_processed_normalization_consts.csv
    context_length: 600 # in seconds
    prediction_length: 510 # in seconds
    target_turbine_ids: # or leave blank to capture all
    normalize: true # Using denormalized data with TACTiS-2's internal scaling 
    batch_size: 128
    base_batch_size: 128  # Base batch size for scaling calculations
    workers: 4 # Consider adjusting based on CPU cores per task
    overfit: false
    test_split: 0.20
    val_split: 0.10
    resample_freq: 30s
    n_splits: 1 # how many divisions of each continuity group to make which is further subdivided into training test and validation data
    per_turbine_target: true
    # context_length_factor: 2  # INFO: Takes precedence over context_length when use_tuned_parameters is true
    use_pytorch_dataloader: true

model:
  distr_output: 
    class: LowRankMultivariateNormalOutput
    kwargs:
      rank: 8

  ############# MODEL-SPECIFIC PARAMETERS ##############
  # [ TACTiS-2 ]
  tactis:
    # General TACTiS settings
    initial_stage: 1
    stage2_start_epoch: 20 # Epoch to start stage 2 (copula training)
    ac_mlp_num_layers: 2 # MLP layers for attention copula
    ac_mlp_dim: 128      # Dimension of AC's internal MLP layers
    stage1_activation_function: "relu" # Activation for Stage 1 encoders (e.g., "relu", "gelu", "leaky_relu")
    stage2_activation_function: "relu" # Activation for Stage 2 encoders (e.g., "relu", "gelu", "leaky_relu")
    input_encoding_normalization: true
    scaling: "std" # Options: "mean", "std", null
    loss_normalization: "both" # Options: "series", "timesteps", "both", "none"
    encoder_type: "standard" # Options: "standard", "temporal"
    bagging_size: null
    num_parallel_samples: 200 # Inference only setting
    # Marginal CDF Encoder
    marginal_embedding_dim_per_head: 8
    marginal_num_heads: 5
    marginal_num_layers: 4
    flow_input_encoder_layers: 6
    flow_series_embedding_dim: 5
    # Attentional Copula Encoder
    copula_embedding_dim_per_head: 8
    copula_num_heads: 5
    copula_num_layers: 2
    copula_input_encoder_layers: 1
    copula_series_embedding_dim: 48
    # Decoder
    decoder_dsf_num_layers: 2
    decoder_dsf_hidden_dim: 256
    decoder_mlp_num_layers: 3
    decoder_mlp_hidden_dim: 16
    decoder_transformer_num_layers: 3
    decoder_transformer_embedding_dim_per_head: 16
    decoder_transformer_num_heads: 6
    decoder_num_bins: 50
    # Optimizer Params
    lr_stage1: 5e-6
    lr_stage2: 2e-6
    weight_decay_stage1: 1e-5
    weight_decay_stage2: 1e-5
    # Dropout & Clipping
    dropout_rate: 0.1
    gradient_clip_val_stage1: 1000.0
    gradient_clip_val_stage2: 1000.0
    ### VALUES FOR per_turbine_target = true ###
    # Learning Rate Scheduler for Stage 1
    warmup_steps_s1: 0.10 # Warmup steps for Stage 1
    steps_to_decay_s1: 0.90 # T_max = (steps_per_epoch [282] * epochs_in_stage [30]) - warmup_steps
    eta_min_fraction_s1: 0.01  # Fraction of initial LR for eta_min in Stage 1 cosine decay
    # Learning Rate Scheduler for Stage 2
    warmup_steps_s2: 0.10 # Warmup steps for Stage 2
    steps_to_decay_s2: 0.90 # T_max = (steps_per_epoch [282] * epochs_in_stage [100-30]) - warmup_steps ~ 47940 - warmup_steps    
    eta_min_fraction_s2: 0.01  # Fraction of initial LR for eta_min in Stage 2 cosine decay    
    ### VALUES FOR per_turbine_target = false ###
    # # Learning Rate Scheduler for Stage 1
    # warmup_steps_s1: 201 # Warmup steps for Stage 1
    # steps_to_decay_s1: 1007 # T_max = (steps_per_epoch [282] * epochs_in_stage [30]) - warmup_steps
    # eta_min_fraction_s1: 0.01  # Fraction of initial LR for eta_min in Stage 1 cosine decay
    # # Learning Rate Scheduler for Stage 2
    # warmup_steps_s2: 322 # Warmup steps for Stage 2
    # steps_to_decay_s2: 2497 # T_max = (steps_per_epoch [282] * epochs_in_stage [100-30]) - warmup_steps ~ 47940 - warmup_steps    
    # eta_min_fraction_s2: 0.01  # Fraction of initial LR for eta_min in Stage 2 cosine decay    
  
  # [ Informer ]
  informer:
    # embedding_dimension: 32 # Determines dimension of the embedding space
    num_encoder_layers: 2 # Number of transformer blocks stacked
    num_decoder_layers: 1 # Number of transformer blocks stacked
    n_heads: 8 # Number of heads for spatio-temporal attention
    d_model: 512
    dim_feedforward: 2048
    activation: relu
  autoformer:
    # embedding_dimension: 32 # Determines dimension of the embedding space
    num_encoder_layers: 2 # Number of transformer blocks stacked
    num_decoder_layers: 1 # Number of transformer blocks stacked
    n_heads: 8 # Number of heads for spatio-temporal attention
    dim_feedforward: 2048
    activation: gelu
  spacetimeformer:
    # embedding_dimension: 32 # Determines dimension of the embedding space
    num_encoder_layers: 3 # Number of transformer blocks stacked
    num_decoder_layers: 3 # Number of transformer blocks stacked
    n_heads: 3 # Number of heads for spatio-temporal attention
    d_model: 200
    dim_feedforward: 800
    d_queries_keys: 30
    d_values: 30
    dropout_emb: 0.2
    dropout_attn_matrix: 0.0
    dropout_attn_out: 0.0
    dropout_ff: 0.3
    dropout_qkv: 0.0
    start_token_len: 0
    performer_redraw_interval: 100
    use_shifted_time_windows: False
    # decay_factor: 0.25
    # l2_coeff: 1e-6
    # class_loss_imp: 0.1
    pos_emb_type: abs
    embed_method: spatio-temporal
    activation: gelu
    use_given: False
########### END OF MODEL-SPECIFIC PARAMETERS ###########

callbacks:
    progress_bar:
      class_path: lightning.pytorch.callbacks.TQDMProgressBar
      init_args:
        refresh_rate: 2048  # every n steps
        leave: false
    # early_stopping:
    #   class_path: lightning.pytorch.callbacks.EarlyStopping
    #   init_args:
    #     monitor: 'val_loss'
    #     patience: 100 # Number of epochs to wait before stopping (val>epochs to disable)
    #     min_delta: 0.01 # Minimum change to be considered an improvement
    #     mode: 'min'
    #     check_finite: true
    model_checkpoint:
      class_path: lightning.pytorch.callbacks.ModelCheckpoint
      init_args:
        dirpath: ${logging.checkpoint_dir}
        filename: '{epoch}-{step}-{val_loss:.2f}'
        monitor: 'val_loss'
        mode: 'min'
        save_top_k: 1
        save_last: true
        verbose: true
    lr_monitor: # Log learning rate
      class_path: lightning.pytorch.callbacks.LearningRateMonitor
      init_args:
        logging_interval: step # Log every step/epoch
        log_momentum: false
    dead_neuron_monitor:
      enabled: false

trainer: 
    val_check_interval: 1.0
    accelerator: gpu
    devices: auto
    num_nodes: 1
    strategy: ddp
    max_epochs: 100 # Maximum number of epochs to train 100
    limit_train_batches: 5000