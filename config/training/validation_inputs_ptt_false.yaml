experiment:
  username: jmb0507
  project_name: wind_forecasting_flasc
  run_name: validation_ptt_false_best_trial_181
  project_root: /user/taed7566/Forecasting/wind-forecasting
  log_dir: /user/taed7566/Forecasting/wind-forecasting/logs/
  notes: ""
  extra_tags: ["validation"] # By default already has GPU id and model name.

logging:
  entity: jmb0507-cu-boulder # Wandb entity (group name)
  wandb_mode: online
  save_code: false # Do not save code to W&B
  wandb_dir: /user/taed7566/Forecasting/wind-forecasting/logs # Let WandB create the 'wandb' subdir here
  optuna_dir: /user/taed7566/Forecasting/wind-forecasting/optuna # This might be unused if optuna section is removed
  checkpoint_dir: /dss/work/taed7566/Forecasting_Outputs/wind-forecasting/checkpoints
  slurm_output_dir: /user/taed7566/Forecasting/wind-forecasting/logs/slurm_logs

dataset:
    data_path: /user/taed7566/Forecasting/wind-forecasting/examples/data/preprocessed_flasc_data/SMARTEOLE_WakeSteering_SCADA_1minData_normalized.parquet
    normalization_consts_path:  /user/taed7566/Forecasting/wind-forecasting/examples/data/preprocessed_flasc_data/SMARTEOLE_WakeSteering_SCADA_1minData_normalization_consts.csv
    context_length: 600 # in seconds
    prediction_length: 300 # in seconds
    target_turbine_ids: # or leave blank to capture all
    normalize: false
    batch_size: 1024 # INFO: In tactis only affects gradient precision NOT SPEED! - for tuning: <= 128, for training: max_memory ~1024
    workers: 32 # Consider adjusting based on CPU cores per task
    overfit: False
    test_split: 0.20
    val_split: 0.1
    resample_freq: 60s
    n_splits: 1 # how many divisions of each continuity group to make which is further subdivided into training test and validation data
    per_turbine_target: false
    context_length_factor: 2  # INFO: Being tuned - Factor to multiply prediction_length by

model:
  distr_output:
    class: "LowRankMultivariateNormalOutput" # Doesn't apply to TACTiS-2
    kwargs:
      rank: 5
      sigma_init: 0.2

  ############# MODEL-SPECIFIC PARAMETERS ##############
  # [ TACTiS-2 ]
  tactis:
    # General TACTiS settings
    initial_stage: 1
    stage2_start_epoch: 30 # Epoch to start stage 2 (copula training) # DEBUG
    ac_mlp_num_layers: 2 # Number of layers in AC's internal MLP. INFO: Now tuning
    ac_mlp_dim: 128      # Dimension of AC's internal MLP layers. INFO: Now tuning
    stage1_activation_function: "relu" # Activation for Stage 1 encoders (e.g., "relu", "gelu", "leaky_relu")
    stage2_activation_function: "relu" # Activation for Stage 2 encoders (e.g., "relu", "gelu", "leaky_relu")
    input_encoding_normalization: true # DEBUG
    scaling: "std" # Options: "mean", "std", null # Enable internal standardization # INFO NEEDED std!
    loss_normalization: "series" # Options: "series", "timesteps", "both", "none" INFO: Now tuning
    encoder_type: "standard" # Options: "standard", "temporal"
    bagging_size: null # Optional, defaults to None in estimator
    num_parallel_samples: 100 # INFO: Inference only setting
    inference_num_samples: 100 # INFO: Inference only setting, overrides num_parallel_samples from checkpoint
    # Marginal CDF Encoder
    marginal_embedding_dim_per_head: 8
    marginal_num_heads: 5
    marginal_num_layers: 4
    flow_input_encoder_layers: 6
    flow_series_embedding_dim: 5
    # Attentional Copula Encoder
    copula_embedding_dim_per_head: 8
    copula_num_heads: 5
    copula_num_layers: 2
    copula_input_encoder_layers: 1
    copula_series_embedding_dim: 48
    # Decoder
    decoder_dsf_num_layers: 2
    decoder_dsf_hidden_dim: 256
    decoder_mlp_num_layers: 3
    decoder_mlp_hidden_dim: 16
    decoder_transformer_num_layers: 3
    decoder_transformer_embedding_dim_per_head: 16
    decoder_transformer_num_heads: 6
    decoder_num_bins: 50
    # Optimizer Params
    lr_stage1: 5e-5
    lr_stage2: 1e-6
    weight_decay_stage1: 1e-5
    weight_decay_stage2: 1e-5
    # Dropout & Clipping
    dropout_rate: 0.1
    warmup_steps: 2000
  
  # [ Informer ]
  informer:
    # embedding_dimension: 32 # Determines dimension of the embedding space
    num_encoder_layers: 2 # Number of transformer blocks stacked
    num_decoder_layers: 1 # Number of transformer blocks stacked
    n_heads: 8 # Increased from 4 for better model capacity
    d_model: 128 # Increased from 64 to better utilize H100 GPUs
    dim_feedforward: 512 # Increased from 64 to better utilize H100 GPUs
    activation: relu

  # [ Autoformer ]
  autoformer:
    # embedding_dimension: 32 # Determines dimension of the embedding space
    num_encoder_layers: 2 # Number of transformer blocks stacked
    num_decoder_layers: 1 # Number of transformer blocks stacked
    n_heads: 8 # Number of heads for spatio-temporal attention
    dim_feedforward: 64
    activation: gelu

  # [ Spacetimeformer ]
  spacetimeformer:
    # embedding_dimension: 32 # Determines dimension of the embedding space
    num_encoder_layers: 3 # Number of transformer blocks stacked
    num_decoder_layers: 3 # Number of transformer blocks stacked
    n_heads: 3 # Number of heads for spatio-temporal attention
    d_model: 200
    dim_feedforward: 800
    d_queries_keys: 30
    d_values: 30
    dropout_emb: 0.2
    dropout_attn_matrix: 0.0
    dropout_attn_out: 0.0
    dropout_ff: 0.3
    dropout_qkv: 0.0
    start_token_len: 0
    performer_redraw_interval: 100
    use_shifted_time_windows: false
    # decay_factor: 0.25
    # l2_coeff: 1e-6
    # class_loss_imp: 0.1
    pos_emb_type: abs
    embed_method: spatio-temporal
    activation: gelu
########### END OF MODEL-SPECIFIC PARAMETERS ###########

callbacks:
    progress_bar:
      class_path: lightning.pytorch.callbacks.TQDMProgressBar
      init_args:
        refresh_rate: 1  # every n steps, set to 0 to disable - 25 good
        leave: true
    # early_stopping:
    #   class_path: lightning.pytorch.callbacks.EarlyStopping
    #   init_args:
    #     monitor: 'val_loss'
    #     patience: 5 # Number of epochs to wait before stopping (val>epochs to disable) - 8 good
    #     min_delta: 25.0 # Minimum change to be considered an improvement (>5.0 after observing visual fluctuations of 2-4 per epoch on an almost-perfectly visual plateau) - 5.0 good
    #     mode: 'min'
    #     check_finite: true
    model_checkpoint:
      class_path: lightning.pytorch.callbacks.ModelCheckpoint
      init_args:
        dirpath: ${logging.checkpoint_dir}
        filename: '{epoch}-{step}-{val_loss:.2f}'
        monitor: 'val_loss'
        mode: 'min'
        save_top_k: 1
        save_last: true
    lr_monitor: # Log learning rate
      class_path: lightning.pytorch.callbacks.LearningRateMonitor
      init_args:
        logging_interval: step # Log every training step to see warmup
        log_momentum: false
        log_weight_decay : false
    dead_neuron_monitor: # INFO @boujuan [custom callback] Currently only works for tactis-2 (check utils/callbacks.py)
      enabled: false # DEBUG

trainer:
    gradient_clip_val: 0.0 # Global clipping # DEBUG make sure it works
    # limit_val_batches: 1.0
    # val_check_interval: 1.0
    accelerator: gpu # 'cpu' or 'gpu'
    devices: auto
    num_nodes: 1
    strategy: "ddp" # Removed for single-GPU inference
    # n_workers: auto
    # debug: false
    # accumulate: 1.0
    max_epochs: 1 # Maximum number of epochs to train
    limit_train_batches: #5000 # INFO: Training-only setting (not tuning) Set to null to use all data
    # default_root_dir: ${logging.checkpoint_dir}  # Changed from direct path to use log_dir
    # precision: 16-mixed # 16-mixed enables mixed precision training 32-true is full precision
    # batch_size: 32 # larger = more stable gradients
    # lr: 0.0001 # Step size
    # dropout: 0.1 # Regularization parameter (prevents overfitting)
    # patience: 50 # Number of epochs to wait before early stopping
    # accumulate_grad_batches: 2 # Simulates a larger batch size
    log_every_n_steps: 1 # For wandb logging
    deterministic: false
    benchmark: true